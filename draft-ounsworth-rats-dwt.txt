



RATS                                                        M. Ounsworth
Internet-Draft                                             R. Kettlewell
Intended status: Standards Track                                 Entrust
Expires: 28 May 2025                                         J. P. Fiset
                                                                Crypto4A
                                                           H. Tschofenig
                                                                   H-BRS
                                                                T. Reddy
                                                                   Nokia
                                                              M. Wiseman
                                                         Beyond Identity
                                                        24 November 2024


                             DER Web Token
                    draft-ounsworth-rats-dwt-latest

Abstract

   An Attestation Token provides a set of claims that describe the state
   and characteristics of an entity, such as a hardware security module,
   smartphone, IoT device, or network equipment.  This claims set allows
   a relying party to assess the type and degree of trust it can place
   in the entity.

   This document utilizes the claims defined for the Entity Attestation
   Token (EAT) and defines them in ASN.1 format and supports their
   encoding using Distinguished Encoding Rules (DER).  EAT specified
   claims for use with both the CBOR Web Token (CWT) and the JSON Web
   Token (JWT).  This new structure, referred to as the DER Web Token
   (DWT), is generated by an Attester as part of remote attestation
   procedures and serves as Evidence.

   The document adheres to the Remote ATtestation procedureS (RATS)
   architecture, where Evidence is transmitted by an Attester and
   subsequently processed by a Verifier.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 28 May 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Use Cases
   4.  Attestation Evidence
   5.  Signing and Verification Procedure
     5.1.  Signing Procedure
     5.2.  Verification Procedure
   6.  Claims
     6.1.  Device Identifier
       6.1.1.  ueid (Universal Entity ID) Claim
       6.1.2.  sueids (Semi-permanent UEIDs) Claim (SUEIDs)
       6.1.3.  oemid (Hardware OEM Identification) Claim
       6.1.4.  hwmodel (Hardware Model) Claim
       6.1.5.  hwversion (Hardware Version) Claim
     6.2.  Environment Identifier
     6.3.  Software Identifier
     6.4.  OEM Boot
     6.5.  Dbgstat (Debug Status)
     6.6.  Location
     6.7.  Uptime
     6.8.  Bootcount
     6.9.  Bootseed
     6.10. dloas (Digital Letters of Approval)
     6.11. Endorsements
     6.12. Manifests
     6.13. Measurements
     6.14. Measres (Software Measurement Results)
     6.15. Submods (Submodules)
     6.16. iat (Issuance Time)
     6.17. intuse (Intended Use)
     6.18. Nonce
     6.19. Extensibility
   7.  Security Considerations
   8.  IANA Considerations
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Appendix A.  Acknowledgements
   Appendix B.  ASN.1 Module
   Authors' Addresses

1.  Introduction

   Trusted execution environments, such as secure elements and hardware
   security modules (HSMs), have become widely used for providing a
   secure environment to house cryptographic key material and security-
   sensitive code.  These environments support functions like signing
   and decryption services, secure boot, secure storage, and other
   critical security operations.  Typically, these security functions
   are accessed through a narrow and well-defined interface and are used
   by operating system libraries and applications.

   Increasingly, entities relying on these secure elements seek evidence
   that security-sensitive operations are truly being executed within a
   secure environment.  This evidence may pertain to the secure element
   platform itself or to the storage and protection of cryptographic
   keys, or both.  Such evidence is commonly referred to as remote
   attestation and is covered by the Remote ATtestation procedureS
   (RATS) architecture [RFC9344].  This document specifies an evidence
   data format defined in ASN.1 [X.680], leveraging many data structures
   from the PKIX ASN.1 modules [RFC5912].  This approach offers a
   convenient format for secure elements and verifiers, particularly
   those designed for use within X.509 Public Key Infrastructures.

   This specification re-uses the claims defined in [I-D.ietf-rats-eat],
   describes them in ASN.1, and serializes them in DER format.  While
   the encoding of these claims differs from what is defined in
   [I-D.ietf-rats-eat], their semantics remain unchanged.  This
   specification does not constitute an EAP profile, as described in
   Section 6 of [I-D.ietf-rats-eat].

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   This document re-uses the terms defined in [RFC9334] related to
   remote attestation.  Readers of this document are assumed to be
   familiar with the following terms: Evidence, Claim, Attestation
   Result, Attester, Verifier, and Relying Party.

3.  Use Cases

   This specification was designed to meet the requirements published by
   the CA Browser Forum to convey properties about hardware security
   models, such as non-exportability, which must be enabled for storing
   publicly-trusted code-signing keys.  There are, however, other use
   cases where remote attestation may also be used, such as

   *  A Certification Authority receives a certificate signing request
      and wishes to verify that the subject public key was generated in
      an HSM (for example to satisfy CA/B Forum subscriber private key
      verification requirement).  They may also wish to verify that the
      operations the HSM will allow for the corresponding private key
      are consistent with the purpose of the requested certificate.
   *  A user of a Cloud Service Provider's 'Bring Your Own Key' service
      wishes to transfer their locally-generated key securely to the
      CSP's service by encrypting it under the CSP's public key.  As
      part of their due diligence on the CSP's key they wish to verify
      (1) that it was generated by an HSM and (2) may only be used to
      unwrap the key into an HSM (i.e. unwrap permission but not decrypt
      permission).
   *  An auditor of an identity provision service (or a competent end
      user) may wish to verify that keys representing end-user
      identities are held in an HSM and have permissions that are in
      line with the applicable regulations.  For example, they may wish
      verify that the protection arrangements for assigned keys cannot
      be changed.
   *  A manufacturer needs to provision configuration info, software,
      and credentials to a device from remote.  With the help of remote
      attestation the manufacturer is provided enough information to
      verify that information is only sent to devices it has built.
   *  Two HSM devices are establishing keys to perform secure exchange
      of information to establish a high availability cluster.  As part
      of the establishment, an attestation message is sent between the
      devices to report on keys and policies.  This allows the devices
      to confirm the origin of the keys and verify that policies are
      respected such a FIPS mode and other similar details.

4.  Attestation Evidence

   This specification defines the following Evidence format, which
   contains a set of claims.  To protect Evidence against modification,
   it is protected with a digital signature.

   PkixEvidenceStatement ::= SEQUENCE {
     tbsEvidence TBSEvidenceStatement
     signatureValues SEQUENCE SIZE (1..MAX) OF BIT STRING,
     relatedCertificates [0] IMPLICIT SEQUENCE of Certificate OPTIONAL
     -- As defined in RFC 5280
   }

   TBSEvidenceStatement ::= SEQUENCE {
     version INTEGER,
     claims SEQUENCE SIZE (1..MAX) OF EVIDENCE-CLAIM,
     signatureInfos SEQUENCE SIZE (1..MAX) OF SignatureInfo
   }

   EVIDENCE-CLAIM ::= TYPE-IDENTIFIER

   -- TYPE-IDENTIFIER definition from X.681
   TYPE-IDENTIFIER ::= CLASS
   {
       &id OBJECT IDENTIFIER UNIQUE,
       &Type
   }
   WITH SYNTAX {&Type IDENTIFIED BY &id}

   SignatureInfo ::= SEQUENCE {
      signatureAlgorithm AlgorithmIdentifier,
      sid [0] SignerIdentifier OPTIONAL
   }

   SignerIdentifier ::= SEQUENCE {
      keyId [0] EXPLICIT OCTET STRING OPTIONAL,
      subjectKeyIdentifier [1] EXPLICIT SubjectPublicKeyInfo OPTIONAL,
        -- As defined in RFC 5280
      certificate [2] EXPLICIT Certificate OPTIONAL,
        -- As defined in RFC 5280
      certHash [3] EXPLICIT CertHash OPTIONAL
   }

   CertHash ::= SEQUENCE {
       hash AlgorithmIdentifier,
       value OCTET STRING
   }
   -- There is bound to already exist an ASN.1 structure
   -- for this somewhere.

   AlgorithmIdentifier ::= SEQUENCE {
      algorithm OBJECT IDENTIFIER,
      parameters ANY DEFINED BY algorithm OPTIONAL
   }

   version MUST be set to 1.

5.  Signing and Verification Procedure

   EDNOTE: Can we start our versions at some number to avoid versions
   that Crypto4A has already used?

5.1.  Signing Procedure

   1.  The message to be signed is the TBSEvidenceStatement, including
       the SignatureInfo for each of the signatures to be performed.
   2.  Each signature is computed in parallel and placed into index of
       the signatureValues SEQUENCE that matches the position of the
       corresponding SignatureInfo in the signatureInfos sequence.

   The signer MUST produce one signature per signatureInfo, it MUST NOT
   omit signatures and MUST NOT produce a subset of the signatures
   listed in signatureInfos.

5.2.  Verification Procedure

   1.  The message to be verified is the TBSEvidenceStatement.
   2.  For each signatureInfo, the corresponding verification public key
       and signature algorithm is found according to the information
       contained in the SignatureInfo for that signature and any
       accompanying certificates or key material.
   3.  For each signature, the message is verified using the value from
       the corresponding element of the signatureValue sequence.
   4.  The PkixEvidenceStatement SHOULD be considered valid if and only
       if all signatures are valid; i.e. multiple signatures are to be
       treated as an AND mode.  This item is a recommendation and not a
       hard requirement since verification policy is of course at the
       discretion of the Verifier.

   EDNOTE: the major change here from the original Crypto4A QASM
   Attestation is that the original only includes the claims in the
   signature, whereas this includes everything, including the version,
   list of signature algorithms.  This prevents possible attacks where
   those values are manipulated by attackers.  We should debate whether
   the certificates should be protected by the signature.  Pro:
   generally better for security to sign everything.  Con: in some
   contexts, it may be difficult to have the certificates prior to
   signing, but that's ok because most evidence carrier formats also
   allow you to attach the signatures externally.

6.  Claims

   Since no claims are marked as MANDATORY, the sequence 'claims' may be
   constituted of differing claims from one instance to the next.  This
   is expected as each evidence statement may be providing information
   to support different use cases.

   Once an evidence statement is signed, the Attester is guaranteeing
   that all of the claims carried by the evidence statement are true.

   It is important to note that multiple claims in the sequence may have
   the same 'id'.  Implementers should ensure that this case is handled
   by verifying logic.

        +==============+=========================+===============+
        | Claim        | Value                   | Section       |
        +==============+=========================+===============+
        | Oemid        | UTF8String              | Section 6.1   |
        +--------------+-------------------------+---------------+
        | Hwmodel      | UTF8String              | Section 6.1   |
        +--------------+-------------------------+---------------+
        | Hwversion    | UTF8String              | Section 6.1   |
        +--------------+-------------------------+---------------+
        | Hwserial     | UTF8String              | Section 6.1   |
        +--------------+-------------------------+---------------+
        | Ueid         | UTF8String              | Section 6.1.1 |
        +--------------+-------------------------+---------------+
        | Sueid        | UTF8String              | Section 6.1.2 |
        +--------------+-------------------------+---------------+
        | EnvID        | UTF8String              | Section 6.2   |
        +--------------+-------------------------+---------------+
        | Swname       | UTF8String              | Section 6.3   |
        +--------------+-------------------------+---------------+
        | Swversion    | UTF8String              | Section 6.3   |
        +--------------+-------------------------+---------------+
        | Oemboot      | BOOLEAN                 | Section 6.4   |
        +--------------+-------------------------+---------------+
        | Location     | ???                     | Section 6.6   |
        +--------------+-------------------------+---------------+
        | Dbgstat      | CHOICE                  | Section 6.5   |
        +--------------+-------------------------+---------------+
        | Uptime       | INTEGER                 | Section 6.7   |
        +--------------+-------------------------+---------------+
        | Bootcount    | INTEGER                 | Section 6.8   |
        +--------------+-------------------------+---------------+
        | Bootseed     | BIT STRING              | Section 6.9   |
        +--------------+-------------------------+---------------+
        | Dloas        | SEQUENCE OF Dloa        | Section 6.10  |
        +--------------+-------------------------+---------------+
        | Endorsements | SEQUENCE of Endorsement | Section 6.11  |
        +--------------+-------------------------+---------------+
        | Manifests    | ??                      | Section 6.12  |
        +--------------+-------------------------+---------------+
        | Measurements | ??                      | Section 6.13  |
        +--------------+-------------------------+---------------+
        | Measres      | ??                      | Section 6.14  |
        +--------------+-------------------------+---------------+
        | Submods      | ??                      | Section 6.15  |
        +--------------+-------------------------+---------------+
        | Iat          | Time                    | Section 6.16  |
        +--------------+-------------------------+---------------+
        | Nonce        | OCTET STRING            | Section 6.18  |
        +--------------+-------------------------+---------------+

                                 Table 1

                   +==============+=====+=============+
                   | Claim        | OID | Status      |
                   +==============+=====+=============+
                   | Oemid        | TBD | RECOMMENDED |
                   +--------------+-----+-------------+
                   | Hwmodel      | TBD | RECOMMENDED |
                   +--------------+-----+-------------+
                   | Hwversion    | TBD | RECOMMENDED |
                   +--------------+-----+-------------+
                   | Hwserial     | TBD | RECOMMENDED |
                   +--------------+-----+-------------+
                   | Ueid         | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Sueid        | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | EnvID        | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Swname       | TBD | RECOMMENDED |
                   +--------------+-----+-------------+
                   | Swversion    | TBD | RECOMMENDED |
                   +--------------+-----+-------------+
                   | Oemboot      | TBD | RECOMMENDED |
                   +--------------+-----+-------------+
                   | Location     | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Dbgstat      | TBD | RECOMMENDED |
                   +--------------+-----+-------------+
                   | Uptime       | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Bootcount    | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Bootseed     | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Dloas        | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Endorsements | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Manifests    | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Measurements | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Measres      | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Submods      | TBD | OPTIONAL    |
                   +--------------+-----+-------------+
                   | Iat          | TBD | RECOMMENDED |
                   +--------------+-----+-------------+
                   | Nonce        | TBD | OPTIONAL    |
                   +--------------+-----+-------------+

                                 Table 2

6.1.  Device Identifier

   Devices assigned a Universal Entity ID compliant with RATS EAT SHOULD
   provide this in the Ueid or Sueid claim.  Devices with a traditional
   human-readable serial number SHOULD provide this in the Hwserial
   claim.  Both MAY be provided.

   The set {OemID, Hwmodel, Hwversion, Hwserial}, when provided, SHOULD
   represent a universally unique identification of the device.  Where
   applicable, {OemID, Hwmodel, Hwversion} SHOULD match the way the
   device is identified in relevant endorsements, such as published FIPS
   or Common Criteria certificates.

6.1.1.  ueid (Universal Entity ID) Claim

   The "ueid" claim conveys a UEID, which identifies an individual
   manufactured entity.  This identifier is a globally unique and
   permanent identifier.  See Section 4.2.1 of [I-D.ietf-rats-eat] for a
   description of this claim.  Three types of UEIDs are defined, which
   are distinguished via a type field.

   The ueid claim is defined as follows:

      id-ce-evidence-ueid OBJECT IDENTIFIER ::=
            { id-ce TBD_evidence TBD_ueid }

      claim_ueid ::= SEQUENCE {
          type    INTEGER ( RAND(1), EUI(2), IMEI(3),...),
          value   OCTET STRING
      }

6.1.2.  sueids (Semi-permanent UEIDs) Claim (SUEIDs)

   The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs).
   An SUEID has the same format, characteristics and requirements as a
   UEID, but MAY change to a different value on entity life-cycle events
   while the ueid claim is permanent.  An entity MAY have both a UEID
   and SUEIDs, neither, one or the other.

   There MAY be multiple SUEIDs and each has a text string label the
   purpose of which is to distinguish it from others.

   See Section 4.2.2 of [I-D.ietf-rats-eat] for a description of this
   claim.

   The sueids claim is defined as follows:

      id-ce-evidence-sueids OBJECT IDENTIFIER ::=
            { id-ce TBD_evidence TBD_sueids }

      claim_sueids ::= SEQUENCE {
          label   OCTET STRING,
          type    INTEGER ( RAND(1), EUI(2), IMEI(3),...),
          value   OCTET STRING
      }

6.1.3.  oemid (Hardware OEM Identification) Claim

   The "oemid" claim identifies the Original Equipment Manufacturer
   (OEM) of the hardware.

   See Section 4.2.3 of [I-D.ietf-rats-eat] for a description of this
   claim.

   The value of this claim depends on the type of OEMID and three types
   of IDs are defined:

   *  OEMIDs using a 128-bit random number.  Section 4.2.3.1 of
      [I-D.ietf-rats-eat] defines this type.
   *  an IEEE based OEMID using a global registry for MAC addresses and
      company IDs.  Section 4.2.3.1 of [I-D.ietf-rats-eat] defines this
      type.
   *  OEMIDs using Private Enterprise Numbers maintained by IANA.
      Section 4.2.3.3 of [I-D.ietf-rats-eat] defines this type.

   The oemid claim is defined as follows:

      id-ce-evidence-oemid OBJECT IDENTIFIER ::=
            { id-ce TBD_evidence TBD_oemid }

      claim_oemid ::= SEQUENCE {
          type    INTEGER ( PEN(1), IEEE(2), RANDOM(3),...),
          value   OCTET STRING
      }

   Editor's Note: The value for the PEN is numeric.  For the other two
   types it is a binary string.

6.1.4.  hwmodel (Hardware Model) Claim

   The "hwmodel" claim differentiates hardware models, products and
   variants manufactured by a particular OEM, the one identified by OEM
   ID.  It MUST be unique within a given OEM ID.  The concatenation of
   the OEM ID and "hwmodel" give a global identifier of a particular
   product.  The "hwmodel" claim MUST only be present if an "oemid"
   claim is present.

   See Section 4.2.4 of [I-D.ietf-rats-eat] for a description of this
   claim.

   The hwmodel claim is defined as follows:

      id-ce-evidence-hwmodel OBJECT IDENTIFIER ::=
            { id-ce TBD_evidence TBD_hwmodel }

      claim_hwmodel ::= OCTET STRING

6.1.5.  hwversion (Hardware Version) Claim

   The "hwversion" claim is a text string the format of which is set by
   each manufacturer.  A "hwversion" claim MUST only be present if a
   "hwmodel" claim is present.

   See Section 4.2.5 of [I-D.ietf-rats-eat] for a description of this
   claim.

   The hwversion claim is defined as follows:

      id-ce-evidence-hwversion OBJECT IDENTIFIER ::=
            { id-ce TBD_evidence TBD_hwwversion }

      hwversion ::= OCTET STRING

6.2.  Environment Identifier

   EnvID EVIDENCE-CLAIM ::= UTF8String IDENTIFIED BY TBD

   This claim MAY be used to identify a partition within a cryptographic
   device, or a logical environment that spans multiple cryptographic
   devices such as a Security World or a cloud tenant.  The format of
   these identifiers will be vendor or environment specific.

6.3.  Software Identifier

   Swname EVIDENCE-CLAIM ::= UTF8String IDENTIFIED BY TBD
     -- semantics defined in rats-eat-4.2.6
   Swversion EVIDENCE-CLAIM ::= UTF8String IDENTIFIED BY TBD
     -- semantics defined in rats-eat-4.2.7

   SwName and Swversion together identify the device firmware and SHOULD
   match the way the firmware is identified in relevant endorsements,
   such as published FIPS or Common Criteria certificates.

6.4.  OEM Boot

   Oemboot EVIDENCE-CLAIM ::= BOOLEAN IDENTIFIED BY TBD
     -- semantics defined in rats-eat-4.2.8

6.5.  Dbgstat (Debug Status)

   The "dbgstat" claim applies to entity-wide or submodule-wide debug
   facilities and diagnostic hardware built into chips.  It applies to
   any software debug facilities related to privileged software that
   allows system-wide memory inspection, tracing or modification of non-
   system software like user mode applications.

   See Section 4.2.9 of [I-D.ietf-rats-eat] for a description of this
   claim and the semantic of the values in the enumerated list.

   The dbgstat claim is defined as follows:

   Dbgstat EVIDENCE-CLAIM ::= CHOICE {
       enabled                         [0] IMPLICIT NULL,
       disabled                        [1] IMPLICIT NULL,
       disabled-Since-Boot             [2] IMPLICIT NULL,
       disabled-Permanently            [3] IMPLICIT NULL,
       disabled-Fully-and-Permanently  [4] IMPLICIT NULL
   }
     -- semantics defined in rats-eat-4.2.9

6.6.  Location

   Location EVIDENCE-CLAIM ::= ???? IDENTIFIED BY TBD
     -- semantics defined in rats-eat-4.2.10

   Most HSMs will likely not know their own physical location, but
   cryptographic modules on mobile devices may.

6.7.  Uptime

   The "uptime" claim contains the number of seconds that have elapsed
   since the entity or submodule was last booted.

   Uptime EVIDENCE-CLAIM ::= INTEGER IDENTIFIED BY TBD
     -- semantics defined in rats-eat-4.2.11

6.8.  Bootcount

   The "bootcount" claim contains a count of the number times the entity
   or submodule has been booted.  Support for this claim requires a
   persistent storage on the device.

   Bootcount EVIDENCE-CLAIM ::= INTEGER IDENTIFIER BY TBD
     -- semantics defined in rats-eat-4.2.12

6.9.  Bootseed

   The "bootseed" claim contains a value created at system boot time
   that allows differentiation of attestation reports from different
   boot sessions of a particular entity (e.g., a certain UEID).

   This value is usually public.  It is not a secret and MUST NOT be
   used for any purpose that a secret seed is needed, such as seeding a
   random number generator.

   Bootseed EVIDENCE-CLAIM ::= BIT STRING IDENTIFIED BY TBD
     -- semantics defined in rats-eat-4.2.13

6.10.  dloas (Digital Letters of Approval)

   The "dloas" claim conveys one or more Digital Letters of Approval
   (DLOAs).  A DLOA is a document that describes a certification that an
   entity has received.  Examples of certifications represented by a
   DLOA include those issued by Global Platform and those based on
   Common Criteria.  The DLOA is unspecific to any particular
   certification type or those issued by any particular organization.

   Dloas EVIDENCE-CLAIM ::= SEQUENCE SIZE (1..MAX) OF Dloa

   Dloa ::= SEQUENCE IDENTIFIED BY TBD {
       dloaRegistrar IA5STRING,
       dloaPlatformLabel UTF8STRING,
       dloaApplicationLabal [0] IMPLICIT UTF8String OPTIONAL
   }
     -- semantics defined in rats-eat-4.2.14

6.11.  Endorsements

   This claim allows referencing third party endorsements; for example
   from the device vendor or a certification such as FIPS or Common
   Criteria.  The content MAY be referenced by URI, or placed directly
   inline, but either way, the endorsement content or its URI MUST be
   known by the attester at the time that the evidence is generated.

   Endorsements EVIDENCE-CLAIM ::= SEQUENCE SIZE (1..MAX) OF Endorsement

   Endorsement ::= CHOICE IDENTIFIED BY TBD {
       uri     [0] IMPLICIT IA5String,
       content [1] IMPLICIT OCTET STRING
   }

   EDNOTE: this needs a bit of thought about what types of endorsements
   we will likely see, and whether OCTET STRING is the right format.

6.12.  Manifests

   TODO -- rats-eat-4.2.15

6.13.  Measurements

   TODO -- rats-eat-4.2.16

6.14.  Measres (Software Measurement Results)

   TODO -- rats-eat-4.2.17

6.15.  Submods (Submodules)

   TODO -- rats-eat-4.2.18

6.16.  iat (Issuance Time)

   The time at which the evidence was created.  Here we differ from the
   iat claim in rats-eat-4.3.1 in that we use the PKIX time format Time
   instead of the 64-bit CBOR time structure.

   Iat EVIDENCE-CLAIM ::= Time

   It is recognized that many HSMs, especially if air-gapped, will not
   have an accurate system clock.  If the system is not anticipated to
   have a reliable clock, then this claim SHOULD be omitted and the
   Nonce claim used instead.

6.17.  intuse (Intended Use)

   Intuse EVIDENCE-CLAIM ::= CHOICE IDENTIFIED BY TBD {
       generic              [1] IMPLICIT NULL,
       registration         [2] IMPLICIT NULL,
       provisioning         [3] IMPLICIT NULL,
       certificateIssuance  [4] IMPLICIT NULL,
       proofOfPossession    [5] IMPLICIT NULL
   }
     -- semantics defined in rats-eat-4.3.3

   Note: tags intentionally started at 1 to align with EAT.  If the IANA
   registry of intended use claims is extended, then the this CHOICE MAY
   be extended using the same tag values as indicated in the EAT
   registry.

6.18.  Nonce

   The "nonce" claim is used to provide freshness.

   The Nonce claim is used to carry the challenge provided by the caller
   to demonstrate freshness of the generated token.  The following
   constraints apply to the nonce-type:

   *  The length must be reasonable as it may be processed by end
      entities with limited resources.  Therefore, it is RECOMMENDED
      that the length does not exceed 64 bytes.
   *  Only a single nonce value is conveyed.

   The nonce claim is defined as follows:

   Nonce EVIDENCE-CLAIM ::= OCTET STRING IDENTIFIED BY TBD

   See Section 4.1 of [I-D.ietf-rats-eat] for a description of this
   claim.

6.19.  Extensibility

   This document does not provide a comprehensive list of claims.  New
   claims, including proprietary ones, may be introduced in the future.
   Therefore, parsers MUST be prepared to encounter and handle
   unrecognized claims gracefully.

   Generally, a verifier should begin with an appraisal policy outlining
   the specific claims to be evaluated, including any expected values.
   Any additional claims present in the evidence SHOULD be disregarded
   unless otherwise specified.

7.  Security Considerations

   This specification re-uses the claims from the EAT specification and
   relies on the security protection offered by digital signatures.
   This digital signature is computed with the Attestation Key available
   on the device, see Section 12.1 of [RFC9334] for considerations
   regarding the generation, the use and the protection of these
   Attestation Keys.  Since the Attester located at the end entity
   creates the Evidence with claims defined in this document.  This
   document inherits the remote attestation architecture described in
   [RFC9334].  With the re-use of the claims from [I-D.ietf-rats-eat]
   the security and privacy considerations apply also to this document
   even though the encoding in this specification is different from the
   encoding of claims discussed by [I-D.ietf-rats-eat].

   Evidence contains information that may be unique to a device and may
   therefore allow to single out an individual device for tracking
   purposes.  Deployments that have privacy requirements must take
   appropriate measures to ensure that claim values can only identify a
   group of devices and that the Attestation Keys are used across a
   number of devices as well.

   To verify the Evidence, the primary need is to check the signature
   and the correct encoding of the claims.  To produce the Attestation
   Result, the Verifier will use Endorsements, Reference Values, and
   Appraisal Policies.  The policies may require that certain claims
   must be present and that their values match registered reference
   values.  All claims may be worthy of additional appraisal.

8.  IANA Considerations

   TBD: OIDs for all the claims listed in this document.

9.  References

9.1.  Normative References

   [I-D.ietf-rats-eat]
              Lundblade, L., Mandyam, G., O'Donoghue, J., and C.
              Wallace, "The Entity Attestation Token (EAT)", Work in
              Progress, Internet-Draft, draft-ietf-rats-eat-31, 6
              September 2024, <https://datatracker.ietf.org/doc/html/
              draft-ietf-rats-eat-31>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC9334]  Birkholz, H., Thaler, D., Richardson, M., Smith, N., and
              W. Pan, "Remote ATtestation procedureS (RATS)
              Architecture", RFC 9334, DOI 10.17487/RFC9334, January
              2023, <https://www.rfc-editor.org/rfc/rfc9334>.

   [X.680]    ITU-T, "Information technology -- Abstract Syntax Notation
              One (ASN.1): Specification of basic notation", n.d.,
              <https://www.itu.int/rec/T-REC-X.680>.

9.2.  Informative References

   [RFC5912]  Hoffman, P. and J. Schaad, "New ASN.1 Modules for the
              Public Key Infrastructure Using X.509 (PKIX)", RFC 5912,
              DOI 10.17487/RFC5912, June 2010,
              <https://www.rfc-editor.org/rfc/rfc5912>.

   [RFC9344]  Asaeda, H., Ooka, A., and X. Shao, "CCNinfo: Discovering
              Content and Network Information in Content-Centric
              Networks", RFC 9344, DOI 10.17487/RFC9344, February 2023,
              <https://www.rfc-editor.org/rfc/rfc9344>.

Appendix A.  Acknowledgements

   This specification is the work of a design team created by the chairs
   of the LAMPS working group.  This specification has been developed
   based on discussions in that design team.

   The following persons, in no specific order, contributed to the work:
   Richard Kettlewell, Chris Trufan, Bruno Couillard, Jean-Pierre Fiset,
   Sander Temme, Jethro Beekman, Zsolt Rózsahegyi, Ferenc Pető, Mike
   Agrenius Kushner, Tomas Gustavsson, Dieter Bong, Christopher Meyer,
   Michael StJohns, Carl Wallace, Michael Ricardson, Tomofumi Okubo,
   Olivier Couillard, John Gray, Eric Amador, Johnson Darren, Herman
   Slatman, Tiru Reddy, Thomas Fossati, Corey Bonnell, Argenius Kushner,
   James Hagborg.

Appendix B.  ASN.1 Module

   TBD: Full ASN.1 goes in here.

Authors' Addresses

   Mike Ounsworth
   Entrust Limited
   2500 Solandt Road – Suite 100
   Ottawa, Ontario  K2K 3G5
   Canada
   Email: mike.ounsworth@entrust.com


   Richard Kettlewell
   Entrust Limited
   United Kingdom
   Email: Richard.Kettlewell@entrust.com


   Jean-Pierre Fiset
   Crypto4A Technologies Inc.
   1550A Laperriere Ave
   Ottawa, Ontario  K1Z 7T2
   Canada
   Email: jp@crypto4a.com


   Hannes Tschofenig
   University of Applied Sciences Bonn-Rhein-Siegx
   Email: Hannes.Tschofenig@gmx.net


   Tirumaleswar Reddy
   Nokia
   Bangalore
   Karnataka
   India
   Email: kondtir@gmail.com


   Monty Wiseman
   Beyond Identity
   United States of America
   Email: monty.wiseman@beyondidentity.com
